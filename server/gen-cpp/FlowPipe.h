/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FlowPipe_H
#define FlowPipe_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "FlowPipe_types.h"

namespace flow {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FlowPipeIf {
 public:
  virtual ~FlowPipeIf() {}
  virtual bool initiate(const int32_t clientId) = 0;
  virtual bool reset(const int32_t clientId) = 0;
  virtual bool close(const int32_t clientId) = 0;
  virtual bool sendHeartbeat(const int32_t clientId) = 0;
  virtual void getConfig(std::string& _return, const int32_t clientId) = 0;
  virtual void send(const int32_t clientId, const Object& object) = 0;
};

class FlowPipeIfFactory {
 public:
  typedef FlowPipeIf Handler;

  virtual ~FlowPipeIfFactory() {}

  virtual FlowPipeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FlowPipeIf* /* handler */) = 0;
};

class FlowPipeIfSingletonFactory : virtual public FlowPipeIfFactory {
 public:
  FlowPipeIfSingletonFactory(const boost::shared_ptr<FlowPipeIf>& iface) : iface_(iface) {}
  virtual ~FlowPipeIfSingletonFactory() {}

  virtual FlowPipeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FlowPipeIf* /* handler */) {}

 protected:
  boost::shared_ptr<FlowPipeIf> iface_;
};

class FlowPipeNull : virtual public FlowPipeIf {
 public:
  virtual ~FlowPipeNull() {}
  bool initiate(const int32_t /* clientId */) {
    bool _return = false;
    return _return;
  }
  bool reset(const int32_t /* clientId */) {
    bool _return = false;
    return _return;
  }
  bool close(const int32_t /* clientId */) {
    bool _return = false;
    return _return;
  }
  bool sendHeartbeat(const int32_t /* clientId */) {
    bool _return = false;
    return _return;
  }
  void getConfig(std::string& /* _return */, const int32_t /* clientId */) {
    return;
  }
  void send(const int32_t /* clientId */, const Object& /* object */) {
    return;
  }
};

typedef struct _FlowPipe_initiate_args__isset {
  _FlowPipe_initiate_args__isset() : clientId(false) {}
  bool clientId :1;
} _FlowPipe_initiate_args__isset;

class FlowPipe_initiate_args {
 public:

  FlowPipe_initiate_args(const FlowPipe_initiate_args&);
  FlowPipe_initiate_args& operator=(const FlowPipe_initiate_args&);
  FlowPipe_initiate_args() : clientId(0) {
  }

  virtual ~FlowPipe_initiate_args() throw();
  int32_t clientId;

  _FlowPipe_initiate_args__isset __isset;

  void __set_clientId(const int32_t val);

  bool operator == (const FlowPipe_initiate_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_initiate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_initiate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_initiate_pargs {
 public:


  virtual ~FlowPipe_initiate_pargs() throw();
  const int32_t* clientId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_initiate_result__isset {
  _FlowPipe_initiate_result__isset() : success(false) {}
  bool success :1;
} _FlowPipe_initiate_result__isset;

class FlowPipe_initiate_result {
 public:

  FlowPipe_initiate_result(const FlowPipe_initiate_result&);
  FlowPipe_initiate_result& operator=(const FlowPipe_initiate_result&);
  FlowPipe_initiate_result() : success(0) {
  }

  virtual ~FlowPipe_initiate_result() throw();
  bool success;

  _FlowPipe_initiate_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FlowPipe_initiate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_initiate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_initiate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_initiate_presult__isset {
  _FlowPipe_initiate_presult__isset() : success(false) {}
  bool success :1;
} _FlowPipe_initiate_presult__isset;

class FlowPipe_initiate_presult {
 public:


  virtual ~FlowPipe_initiate_presult() throw();
  bool* success;

  _FlowPipe_initiate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlowPipe_reset_args__isset {
  _FlowPipe_reset_args__isset() : clientId(false) {}
  bool clientId :1;
} _FlowPipe_reset_args__isset;

class FlowPipe_reset_args {
 public:

  FlowPipe_reset_args(const FlowPipe_reset_args&);
  FlowPipe_reset_args& operator=(const FlowPipe_reset_args&);
  FlowPipe_reset_args() : clientId(0) {
  }

  virtual ~FlowPipe_reset_args() throw();
  int32_t clientId;

  _FlowPipe_reset_args__isset __isset;

  void __set_clientId(const int32_t val);

  bool operator == (const FlowPipe_reset_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_reset_pargs {
 public:


  virtual ~FlowPipe_reset_pargs() throw();
  const int32_t* clientId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_reset_result__isset {
  _FlowPipe_reset_result__isset() : success(false) {}
  bool success :1;
} _FlowPipe_reset_result__isset;

class FlowPipe_reset_result {
 public:

  FlowPipe_reset_result(const FlowPipe_reset_result&);
  FlowPipe_reset_result& operator=(const FlowPipe_reset_result&);
  FlowPipe_reset_result() : success(0) {
  }

  virtual ~FlowPipe_reset_result() throw();
  bool success;

  _FlowPipe_reset_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FlowPipe_reset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_reset_presult__isset {
  _FlowPipe_reset_presult__isset() : success(false) {}
  bool success :1;
} _FlowPipe_reset_presult__isset;

class FlowPipe_reset_presult {
 public:


  virtual ~FlowPipe_reset_presult() throw();
  bool* success;

  _FlowPipe_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlowPipe_close_args__isset {
  _FlowPipe_close_args__isset() : clientId(false) {}
  bool clientId :1;
} _FlowPipe_close_args__isset;

class FlowPipe_close_args {
 public:

  FlowPipe_close_args(const FlowPipe_close_args&);
  FlowPipe_close_args& operator=(const FlowPipe_close_args&);
  FlowPipe_close_args() : clientId(0) {
  }

  virtual ~FlowPipe_close_args() throw();
  int32_t clientId;

  _FlowPipe_close_args__isset __isset;

  void __set_clientId(const int32_t val);

  bool operator == (const FlowPipe_close_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_close_pargs {
 public:


  virtual ~FlowPipe_close_pargs() throw();
  const int32_t* clientId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_close_result__isset {
  _FlowPipe_close_result__isset() : success(false) {}
  bool success :1;
} _FlowPipe_close_result__isset;

class FlowPipe_close_result {
 public:

  FlowPipe_close_result(const FlowPipe_close_result&);
  FlowPipe_close_result& operator=(const FlowPipe_close_result&);
  FlowPipe_close_result() : success(0) {
  }

  virtual ~FlowPipe_close_result() throw();
  bool success;

  _FlowPipe_close_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FlowPipe_close_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_close_presult__isset {
  _FlowPipe_close_presult__isset() : success(false) {}
  bool success :1;
} _FlowPipe_close_presult__isset;

class FlowPipe_close_presult {
 public:


  virtual ~FlowPipe_close_presult() throw();
  bool* success;

  _FlowPipe_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlowPipe_sendHeartbeat_args__isset {
  _FlowPipe_sendHeartbeat_args__isset() : clientId(false) {}
  bool clientId :1;
} _FlowPipe_sendHeartbeat_args__isset;

class FlowPipe_sendHeartbeat_args {
 public:

  FlowPipe_sendHeartbeat_args(const FlowPipe_sendHeartbeat_args&);
  FlowPipe_sendHeartbeat_args& operator=(const FlowPipe_sendHeartbeat_args&);
  FlowPipe_sendHeartbeat_args() : clientId(0) {
  }

  virtual ~FlowPipe_sendHeartbeat_args() throw();
  int32_t clientId;

  _FlowPipe_sendHeartbeat_args__isset __isset;

  void __set_clientId(const int32_t val);

  bool operator == (const FlowPipe_sendHeartbeat_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_sendHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_sendHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_sendHeartbeat_pargs {
 public:


  virtual ~FlowPipe_sendHeartbeat_pargs() throw();
  const int32_t* clientId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_sendHeartbeat_result__isset {
  _FlowPipe_sendHeartbeat_result__isset() : success(false) {}
  bool success :1;
} _FlowPipe_sendHeartbeat_result__isset;

class FlowPipe_sendHeartbeat_result {
 public:

  FlowPipe_sendHeartbeat_result(const FlowPipe_sendHeartbeat_result&);
  FlowPipe_sendHeartbeat_result& operator=(const FlowPipe_sendHeartbeat_result&);
  FlowPipe_sendHeartbeat_result() : success(0) {
  }

  virtual ~FlowPipe_sendHeartbeat_result() throw();
  bool success;

  _FlowPipe_sendHeartbeat_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FlowPipe_sendHeartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_sendHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_sendHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_sendHeartbeat_presult__isset {
  _FlowPipe_sendHeartbeat_presult__isset() : success(false) {}
  bool success :1;
} _FlowPipe_sendHeartbeat_presult__isset;

class FlowPipe_sendHeartbeat_presult {
 public:


  virtual ~FlowPipe_sendHeartbeat_presult() throw();
  bool* success;

  _FlowPipe_sendHeartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlowPipe_getConfig_args__isset {
  _FlowPipe_getConfig_args__isset() : clientId(false) {}
  bool clientId :1;
} _FlowPipe_getConfig_args__isset;

class FlowPipe_getConfig_args {
 public:

  FlowPipe_getConfig_args(const FlowPipe_getConfig_args&);
  FlowPipe_getConfig_args& operator=(const FlowPipe_getConfig_args&);
  FlowPipe_getConfig_args() : clientId(0) {
  }

  virtual ~FlowPipe_getConfig_args() throw();
  int32_t clientId;

  _FlowPipe_getConfig_args__isset __isset;

  void __set_clientId(const int32_t val);

  bool operator == (const FlowPipe_getConfig_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_getConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_getConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_getConfig_pargs {
 public:


  virtual ~FlowPipe_getConfig_pargs() throw();
  const int32_t* clientId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_getConfig_result__isset {
  _FlowPipe_getConfig_result__isset() : success(false) {}
  bool success :1;
} _FlowPipe_getConfig_result__isset;

class FlowPipe_getConfig_result {
 public:

  FlowPipe_getConfig_result(const FlowPipe_getConfig_result&);
  FlowPipe_getConfig_result& operator=(const FlowPipe_getConfig_result&);
  FlowPipe_getConfig_result() : success() {
  }

  virtual ~FlowPipe_getConfig_result() throw();
  std::string success;

  _FlowPipe_getConfig_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FlowPipe_getConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_getConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_getConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlowPipe_getConfig_presult__isset {
  _FlowPipe_getConfig_presult__isset() : success(false) {}
  bool success :1;
} _FlowPipe_getConfig_presult__isset;

class FlowPipe_getConfig_presult {
 public:


  virtual ~FlowPipe_getConfig_presult() throw();
  std::string* success;

  _FlowPipe_getConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlowPipe_send_args__isset {
  _FlowPipe_send_args__isset() : clientId(false), object(false) {}
  bool clientId :1;
  bool object :1;
} _FlowPipe_send_args__isset;

class FlowPipe_send_args {
 public:

  FlowPipe_send_args(const FlowPipe_send_args&);
  FlowPipe_send_args& operator=(const FlowPipe_send_args&);
  FlowPipe_send_args() : clientId(0) {
  }

  virtual ~FlowPipe_send_args() throw();
  int32_t clientId;
  Object object;

  _FlowPipe_send_args__isset __isset;

  void __set_clientId(const int32_t val);

  void __set_object(const Object& val);

  bool operator == (const FlowPipe_send_args & rhs) const
  {
    if (!(clientId == rhs.clientId))
      return false;
    if (!(object == rhs.object))
      return false;
    return true;
  }
  bool operator != (const FlowPipe_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlowPipe_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlowPipe_send_pargs {
 public:


  virtual ~FlowPipe_send_pargs() throw();
  const int32_t* clientId;
  const Object* object;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class FlowPipeClient : virtual public FlowPipeIf {
 public:
  FlowPipeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FlowPipeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool initiate(const int32_t clientId);
  void send_initiate(const int32_t clientId);
  bool recv_initiate();
  bool reset(const int32_t clientId);
  void send_reset(const int32_t clientId);
  bool recv_reset();
  bool close(const int32_t clientId);
  void send_close(const int32_t clientId);
  bool recv_close();
  bool sendHeartbeat(const int32_t clientId);
  void send_sendHeartbeat(const int32_t clientId);
  bool recv_sendHeartbeat();
  void getConfig(std::string& _return, const int32_t clientId);
  void send_getConfig(const int32_t clientId);
  void recv_getConfig(std::string& _return);
  void send(const int32_t clientId, const Object& object);
  void send_send(const int32_t clientId, const Object& object);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FlowPipeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FlowPipeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FlowPipeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initiate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FlowPipeProcessor(boost::shared_ptr<FlowPipeIf> iface) :
    iface_(iface) {
    processMap_["initiate"] = &FlowPipeProcessor::process_initiate;
    processMap_["reset"] = &FlowPipeProcessor::process_reset;
    processMap_["close"] = &FlowPipeProcessor::process_close;
    processMap_["sendHeartbeat"] = &FlowPipeProcessor::process_sendHeartbeat;
    processMap_["getConfig"] = &FlowPipeProcessor::process_getConfig;
    processMap_["send"] = &FlowPipeProcessor::process_send;
  }

  virtual ~FlowPipeProcessor() {}
};

class FlowPipeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FlowPipeProcessorFactory(const ::boost::shared_ptr< FlowPipeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FlowPipeIfFactory > handlerFactory_;
};

class FlowPipeMultiface : virtual public FlowPipeIf {
 public:
  FlowPipeMultiface(std::vector<boost::shared_ptr<FlowPipeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FlowPipeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FlowPipeIf> > ifaces_;
  FlowPipeMultiface() {}
  void add(boost::shared_ptr<FlowPipeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool initiate(const int32_t clientId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initiate(clientId);
    }
    return ifaces_[i]->initiate(clientId);
  }

  bool reset(const int32_t clientId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset(clientId);
    }
    return ifaces_[i]->reset(clientId);
  }

  bool close(const int32_t clientId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->close(clientId);
    }
    return ifaces_[i]->close(clientId);
  }

  bool sendHeartbeat(const int32_t clientId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendHeartbeat(clientId);
    }
    return ifaces_[i]->sendHeartbeat(clientId);
  }

  void getConfig(std::string& _return, const int32_t clientId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getConfig(_return, clientId);
    }
    ifaces_[i]->getConfig(_return, clientId);
    return;
  }

  void send(const int32_t clientId, const Object& object) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(clientId, object);
    }
    ifaces_[i]->send(clientId, object);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FlowPipeConcurrentClient : virtual public FlowPipeIf {
 public:
  FlowPipeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FlowPipeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool initiate(const int32_t clientId);
  int32_t send_initiate(const int32_t clientId);
  bool recv_initiate(const int32_t seqid);
  bool reset(const int32_t clientId);
  int32_t send_reset(const int32_t clientId);
  bool recv_reset(const int32_t seqid);
  bool close(const int32_t clientId);
  int32_t send_close(const int32_t clientId);
  bool recv_close(const int32_t seqid);
  bool sendHeartbeat(const int32_t clientId);
  int32_t send_sendHeartbeat(const int32_t clientId);
  bool recv_sendHeartbeat(const int32_t seqid);
  void getConfig(std::string& _return, const int32_t clientId);
  int32_t send_getConfig(const int32_t clientId);
  void recv_getConfig(std::string& _return, const int32_t seqid);
  void send(const int32_t clientId, const Object& object);
  void send_send(const int32_t clientId, const Object& object);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
