/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FlowPipe_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace flow {


Object::~Object() throw() {
}


void Object::__set_objectId(const int64_t val) {
  this->objectId = val;
}

void Object::__set_startTimeStamp(const int64_t val) {
  this->startTimeStamp = val;
}

void Object::__set_lastTimeStamp(const int64_t val) {
  this->lastTimeStamp = val;
}

void Object::__set_positionX(const double val) {
  this->positionX = val;
}

void Object::__set_positionY(const double val) {
  this->positionY = val;
}

void Object::__set_countFrames(const int32_t val) {
  this->countFrames = val;
}

void Object::__set_skippedFrames(const int32_t val) {
  this->skippedFrames = val;
}

uint32_t Object::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->objectId);
          this->__isset.objectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeStamp);
          this->__isset.startTimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastTimeStamp);
          this->__isset.lastTimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->positionX);
          this->__isset.positionX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->positionY);
          this->__isset.positionY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->countFrames);
          this->__isset.countFrames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skippedFrames);
          this->__isset.skippedFrames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Object::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Object");

  xfer += oprot->writeFieldBegin("objectId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->objectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimeStamp", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->startTimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastTimeStamp", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->lastTimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionX", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->positionX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionY", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->positionY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countFrames", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->countFrames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skippedFrames", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->skippedFrames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Object &a, Object &b) {
  using ::std::swap;
  swap(a.objectId, b.objectId);
  swap(a.startTimeStamp, b.startTimeStamp);
  swap(a.lastTimeStamp, b.lastTimeStamp);
  swap(a.positionX, b.positionX);
  swap(a.positionY, b.positionY);
  swap(a.countFrames, b.countFrames);
  swap(a.skippedFrames, b.skippedFrames);
  swap(a.__isset, b.__isset);
}

Object::Object(const Object& other0) {
  objectId = other0.objectId;
  startTimeStamp = other0.startTimeStamp;
  lastTimeStamp = other0.lastTimeStamp;
  positionX = other0.positionX;
  positionY = other0.positionY;
  countFrames = other0.countFrames;
  skippedFrames = other0.skippedFrames;
  __isset = other0.__isset;
}
Object& Object::operator=(const Object& other1) {
  objectId = other1.objectId;
  startTimeStamp = other1.startTimeStamp;
  lastTimeStamp = other1.lastTimeStamp;
  positionX = other1.positionX;
  positionY = other1.positionY;
  countFrames = other1.countFrames;
  skippedFrames = other1.skippedFrames;
  __isset = other1.__isset;
  return *this;
}
void Object::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Object(";
  out << "objectId=" << to_string(objectId);
  out << ", " << "startTimeStamp=" << to_string(startTimeStamp);
  out << ", " << "lastTimeStamp=" << to_string(lastTimeStamp);
  out << ", " << "positionX=" << to_string(positionX);
  out << ", " << "positionY=" << to_string(positionY);
  out << ", " << "countFrames=" << to_string(countFrames);
  out << ", " << "skippedFrames=" << to_string(skippedFrames);
  out << ")";
}

} // namespace
