/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FlowPipe_TYPES_H
#define FlowPipe_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace flow {

class Object;

typedef struct _Object__isset {
  _Object__isset() : objectId(false), startTimeStamp(false), lastTimeStamp(false), positionX(false), positionY(false), countFrames(false), skippedFrames(false) {}
  bool objectId :1;
  bool startTimeStamp :1;
  bool lastTimeStamp :1;
  bool positionX :1;
  bool positionY :1;
  bool countFrames :1;
  bool skippedFrames :1;
} _Object__isset;

class Object {
 public:

  Object(const Object&);
  Object& operator=(const Object&);
  Object() : objectId(0), startTimeStamp(0), lastTimeStamp(0), positionX(0), positionY(0), countFrames(0), skippedFrames(0) {
  }

  virtual ~Object() throw();
  int64_t objectId;
  int64_t startTimeStamp;
  int64_t lastTimeStamp;
  double positionX;
  double positionY;
  int32_t countFrames;
  int32_t skippedFrames;

  _Object__isset __isset;

  void __set_objectId(const int64_t val);

  void __set_startTimeStamp(const int64_t val);

  void __set_lastTimeStamp(const int64_t val);

  void __set_positionX(const double val);

  void __set_positionY(const double val);

  void __set_countFrames(const int32_t val);

  void __set_skippedFrames(const int32_t val);

  bool operator == (const Object & rhs) const
  {
    if (!(objectId == rhs.objectId))
      return false;
    if (!(startTimeStamp == rhs.startTimeStamp))
      return false;
    if (!(lastTimeStamp == rhs.lastTimeStamp))
      return false;
    if (!(positionX == rhs.positionX))
      return false;
    if (!(positionY == rhs.positionY))
      return false;
    if (!(countFrames == rhs.countFrames))
      return false;
    if (!(skippedFrames == rhs.skippedFrames))
      return false;
    return true;
  }
  bool operator != (const Object &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Object & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Object &a, Object &b);

inline std::ostream& operator<<(std::ostream& out, const Object& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
